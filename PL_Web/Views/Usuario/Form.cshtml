@model ML.Usuario
@{
    ViewBag.Title = "Form";
    Layout = "~/Views/Shared/_Layout.cshtml";
    string src;
    if (Model.Sexo != null)
    {
        string imgSexo = Model.Sexo == "HO" ? "usuarioMasculino.png" : "usuarioFemenino.png";
        src = Model.Imagen != null ? "data:image/png;base64," + Convert.ToBase64String(Model.Imagen) : "/content/imagenes/" + imgSexo;
    }
    else
    {
        src = "/content/imagenes/usuarioMasculino.png";
    }
}
<link rel="stylesheet" href="https://code.jquery.com/ui/1.14.1/themes/base/jquery-ui.css">
<h2>Nuevo Usuario</h2>
<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="card p-4 shadow">
                <div class="text-center mb-4">
                    <img src="@src" style="width:15%" alt="Imagen Usuario" id="imagenUsuario" />
                </div>
                @using (Html.BeginForm("Form", "Usuario", FormMethod.Post, new { @enctype = "multipart/form-data", @onsubmit = "Enviar(event)" }))
                {
                    @Html.HiddenFor(model => model.IdUsuario)
                    @Html.HiddenFor(model => model.Direccion.IdDireccion)
                    @Html.HiddenFor(model => model.Imagen)
                    <div class="row mb-4">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Nombre, new { @class = "form-label" })
                            @Html.TextBoxFor(model => model.Nombre, new { @class = "form-control", @placeholder = "", @onkeypress = "SoloLetras(event)" })
                            <div class="error"></div>
                        </div>
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.ApellidoPaterno, new { @class = "form-label" })
                            @Html.TextBoxFor(model => model.ApellidoPaterno, new { @class = "form-control", @placeholder = "", @onkeypress = "SoloLetras(event)" })
                            <div class="error"></div>
                        </div>
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.ApellidoMaterno, new { @class = "form-label" })
                            @Html.TextBoxFor(model => model.ApellidoMaterno, new { @class = "form-control", @placeholder = "", @onkeypress = "SoloLetras(event)" })
                            <div class="error"></div>
                        </div>
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Email, new { @class = "form-label" })
                            @Html.TextBoxFor(model => model.Email, new { @class = "form-control", @placeholder = "", @onblur = "SoloEmail()" })
                            <div class="error"></div>
                        </div>
                    </div>
                    <div class="row mb-4">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Password, new { @class = "form-label" })
                            <input type="password" id="password" class="form-control" placeholder="*********" onblur="ValidatePassword()">
                            <div class="error"></div>
                        </div>                        
                        <div class="col-md-3">
                            <label class="form-label">Confirm password</label>
                            @Html.PasswordFor(model => model.Password, new { @class = "form-control", @placeholder = "*********", @id = "confirmPassword", @onblur = "ValidatePasswordConfirm()" })
                            <div class="error"></div>
                        </div>
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Telefono, new { @class = "form-label" })
                            @Html.TextBoxFor(model => model.Telefono, new { @class = "form-control", @placeholder = "", @id = "inptTelefono", @onblur = "ValidateTelefono('inptTelefono')" })
                            <div class="error"></div>
                        </div>
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Celular, new { @class = "form-label" })
                            @Html.TextBoxFor(model => model.Celular, new { @class = "form-control", @placeholder = "", @id = "inptCelular", @onblur = "ValidateTelefono('inptCelular')" })
                            <div class="error"></div>
                        </div>
                    </div>
                    <div class="row mb-4">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.FechaNacimiento, new { @class = "form-label" })
                            @Html.TextBoxFor(model => model.FechaNacimiento, new { @class = "form-control", @id = "datepicker", @onchange = "ValidateFecha()" })
                            <div class="error"></div>
                        </div>
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.CURP, new { @class = "form-label" })
                            @Html.TextBoxFor(model => model.CURP, new { @class = "form-control", @placeholder = "", @id = "inptCRUP", @onblur = "ValidateCURP()" })
                            <div class="error"></div>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Roles</label>
                            @Html.DropDownListFor(model => model.Rol.IdRol, new SelectList(Model.Rol.Roles, "IdRol", "Nombre"), "Seleccione un rol", new { @class = "form-select", @id = "ddlRol", @onchange = "ValidateSelect('ddlRol')" })
                            <div class="error"></div>
                        </div>
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.UserName, new { @class = "form-label" })
                            @Html.TextBoxFor(model => model.UserName, new { @class = "form-control", @placeholder = "", @id = "inptUserName", @onblur = "ValidateUserName()" })
                            <div class="error"></div>
                        </div>
                    </div>
                    <div class="row mb-4">
                        <div class="col-md-3">
                            <div class="form-check form-check-inline mt-1">
                                @Html.RadioButtonFor(model => model.Sexo, "HO", new { @class = "form-check-input", @onchange = "CambiarImgSexo()" })
                                @Html.Label("Hombre", new { @class = "form-check-label", @for = "inlineRadio1" })
                            </div>
                            <div class="form-check form-check-inline mt-1">
                                @Html.RadioButtonFor(model => model.Sexo, "MU", new { @class = "form-check-input", @onchange = "CambiarImgSexo()" })
                                @Html.Label("Mujer", new { @class = "form-check-label", @for = "inlineRadio1" })
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-check form-switch mt-1">
                                @Html.CheckBoxFor(model => model.Estatus, new { @class = "form-check-input", @role = "switch" })
                                @Html.LabelFor(model => model.Estatus, new { @class = "form-check-label", @for = "flexSwitchCheckDefault" })
                            </div>
                        </div>
                    </div>
                    <hr class="mb-4" />
                    <div class="row mb-4">
                        <div class="col-md-3">
                            <label class="form-label">Direcciones</label>
                            @Html.LabelFor(model => model.Direccion.Colonia.Municipio.Estado.IdEstado, new { @class = "form-label" })
                            @Html.DropDownListFor(model => model.Direccion.Colonia.Municipio.Estado.IdEstado, new SelectList(Model.Direccion.Colonia.Municipio.Estado.Estados, "IdEstado", "Nombre"), "Seleccione un estado", new { @class = "form-select", @onchange = "GetMunicipioByIdEstado(), ValidateSelect('ddlEstado')", @id = "ddlEstado" })
                            <div class="error"></div>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Municipios</label>
                            @if (Model.Direccion.Colonia.Municipio.Municipios != null && Model.Direccion.Colonia.Municipio.Municipios.Count() > 0)
                            {
                                @Html.DropDownListFor(model => model.Direccion.Colonia.Municipio.IdMunicipio, new SelectList(Model.Direccion.Colonia.Municipio.Municipios, "IdMunicipio", "Nombre"), "Seleccione un Municipio", new { @class = "form-select ", @onchange = "GetColoniasByIdMunicipio(), ValidateSelect('ddlMunicipio')", @id = "ddlMunicipio" })
                            }
                            else
                            {
                                @Html.DropDownListFor(model => model.Direccion.Colonia.Municipio.IdMunicipio, new SelectList(String.Empty), "Seleccione un Municipio", new { @class = "form-select ", @onchange = "GetColoniasByIdMunicipio(), ValidateSelect('ddlMunicipio')", @id = "ddlMunicipio" })
                            }
                            <div class="error"></div>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Colonias</label>
                            @if (Model.Direccion.Colonia.Colonias != null && Model.Direccion.Colonia.Colonias.Count() > 0)
                            {
                                @Html.DropDownListFor(model => model.Direccion.Colonia.IdColonia, new SelectList(Model.Direccion.Colonia.Colonias, "IdColonia", "Nombre"), "Seleccione una colonia", new { @class = "form-select", @id = "ddlColonia", @onchange = "ValidateSelect('ddlColonia')" })
                            }
                            else
                            {
                                @Html.DropDownListFor(model => model.Direccion.Colonia.IdColonia, new SelectList(String.Empty), "Seleccione una colonia", new { @class = "form-select", @id = "ddlColonia", @onchange = "ValidateSelect('ddlColonia')" })
                            }
                            <div class="error"></div>
                        </div>
                        <div class="col-md-3 mt-1">
                            @Html.LabelFor(model => model.Direccion.Calle, new { @class = "form-label" })
                            @Html.TextBoxFor(model => model.Direccion.Calle, new { @class = "form-control w-100", @placeholder = "", @id = "inptCalle", @onblur = "ValidateAlphanumericoEspacios()" })
                            <div class="error"></div>
                        </div>
                    </div>
                    <div class="row mb-4">
                        <div class="col-md-3 mt-1">
                            @Html.LabelFor(model => model.Direccion.NumeroInterior, new { @class = "form-label" })
                            @Html.TextBoxFor(model => model.Direccion.NumeroInterior, new { @class = "form-control", @placeholder = "", @onkeypress = "SoloNumeros(event)" })
                            <div class="error"></div>
                        </div>
                        <div class="col-md-3 mt-1">
                            @Html.LabelFor(model => model.Direccion.NumeroExterior, new { @class = "form-label" })
                            @Html.TextBoxFor(model => model.Direccion.NumeroExterior, new { @class = "form-control", @placeholder = "", @onkeypress = "SoloNumeros(event)" })
                            <div class="error"></div>
                        </div>
                        <div class="col-md-6 mt-1">
                            <label for="form-label">Imagen</label>
                            <input onchange="IsImage()" id="inptImagen" name="ImagenUpload" class="form-control" type="file">
                        </div>
                    </div>
                    <div class="card-footer bg-transparent">
                        <div class="row mt-2">
                            <div class="col-6 text-start">
                                <a href="@Url.Action("GetAll", "Usuario")" class="btn btn-danger">
                                    Cancelar
                                    <i class="bi bi-x-square-fill"></i>
                                </a>
                            </div>
                            <div class="col-6 text-end">
                                <button type="submit" class="btn btn-primary">
                                    <i class="bi bi-floppy2-fill"></i>
                                    Guardar
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@Scripts.Render("~/bundles/jquery")
<script src="https://code.jquery.com/ui/1.14.1/jquery-ui.js"></script>
@{ 
    string regExpEmail = "/^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/";
    string passwordRegExp = "/^(?=.*\\d)(?=.*[\\u0021-\\u002b\\u003c-\\u0040])(?=.*[A-Z])(?=.*[a-z])\\S{8,16}$/";
}
<script>
    $(document).ready(
        $("#datepicker").datepicker({
            dateFormat: "dd/mm/yy",
            showAnim: "slideDown"
        })
    )

    function Enviar(event) {
        if (!ValidateForm()) {
            event.preventDefault();
            alert('Por favor, complete todos los campos del formulario.')
        }
    }

    function SoloLetras(event) {
        var caracter = String.fromCharCode(event.which);
        var inputField = event.target;
        var errorMessage = inputField.parentNode.querySelector('.error');
        errorMessage.textContent = '';
        errorMessage.classList.remove('valid-feedback', 'invalid-feedback');
        if (/^[a-zA-Z\s]+$/.test(caracter)) {
            inputField.classList.remove('is-invalid');
            inputField.classList.add('is-valid');
            errorMessage.textContent = 'Entrada válida';
            errorMessage.classList.add('valid-feedback');
        } else {
            event.preventDefault();
            inputField.classList.remove('is-valid');
            inputField.classList.add('is-invalid');
            errorMessage.textContent = 'Solo se permiten letras';
            errorMessage.classList.add('invalid-feedback');
        }
    }

    function SoloEmail() {
        var regExp = @regExpEmail;
        var inputField = $('#Email')[0]
        var errorMessage = inputField.parentNode.querySelector('.error')
        errorMessage.textContent = ''
        errorMessage.classList.remove('valid-feedback', 'invalid-feedback');
        var inEmail = $('#Email').val()
        if (regExp.test(inEmail)) {
            inputField.classList.remove('is-invalid');
            inputField.classList.add('is-valid');
            errorMessage.textContent = 'El formato del correo es correcto'
            errorMessage.classList.add('valid-feedback');
        } else {
            inputField.classList.remove('is-valid');
            inputField.classList.add('is-invalid');
            errorMessage.textContent = 'El formato del correo es incorrecto'
            errorMessage.classList.add('invalid-feedback');
        }
    }

    function ValidatePassword() {
        var password = $('#password').val();
        var passwordField = $('#password')[0]
        var passwordError = passwordField.parentNode.querySelector('.error')
        var passwordRegExp = @passwordRegExp;
        passwordError.textContent = ''
        passwordError.classList.remove('valid-feedback', 'invalid-feedback')
        if (passwordRegExp.test(password)) {
            passwordField.classList.remove('is-invalid');
            passwordField.classList.add('is-valid')
            passwordError.textContent = 'La contraseña es válida.'
            passwordError.classList.add('valid-feedback')
        } else {
            passwordField.classList.remove('is-valid');
            passwordField.classList.add('is-invalid')
            passwordError.textContent = 'La contraseña debe tener mínimo 8 caracteres, una mayúscula, una minúscula, un número y un carácter especial.'
            passwordError.classList.add('invalid-feedback')
        }
    }

    function ValidatePasswordConfirm() {
        var password = $('#password').val();
        var confirmPassword = $('#confirmPassword').val()
        var confirmPasswordField = $('#confirmPassword')[0]
        var confirmPasswordError = confirmPasswordField.parentNode.querySelector('.error')
        confirmPasswordError.textContent = ''
        confirmPasswordError.classList.remove('valid-feedback', 'invalid-feedback')
        if (confirmPassword === password && password !== '') {
            confirmPasswordField.classList.remove('is-invalid');
            confirmPasswordField.classList.add('is-valid')
            confirmPasswordError.textContent = 'Las contraseñas coinciden.'
            confirmPasswordError.classList.add('valid-feedback')
        } else {
            confirmPasswordField.classList.remove('is-valid');
            confirmPasswordField.classList.add('is-invalid')
            confirmPasswordError.textContent = 'Las contraseñas no coinciden.'
            confirmPasswordError.classList.add('invalid-feedback')
        }
    }

    function ValidateTelefono(IdElemento) {
        var RegExpTelefono = new RegExp(/^[\(]?[\+]?(\d{2}|\d{3})[\)]?[\s]?((\d{6}|\d{8})|(\d{3}[\*\.\-\s]){2}\d{3}|(\d{2}[\*\.\-\s]){3}\d{2}|(\d{4}[\*\.\-\s]){1}\d{4})|\d{8}|\d{10}|\d{12}$/)
        var inputField = $('#' + IdElemento)[0]
        var errorMessage = inputField.parentNode.querySelector('.error')
        errorMessage.textContent = ''
        errorMessage.classList.remove('valid-feedback', 'invalid-feedback');
        var elemento = $('#' + IdElemento).val()
        if (RegExpTelefono.test(elemento)) {
            inputField.classList.remove('is-invalid');
            inputField.classList.add('is-valid');
            errorMessage.textContent = 'El formato telefinico es correcto'
            errorMessage.classList.add('valid-feedback');
        } else {
            inputField.classList.remove('is-valid');
            inputField.classList.add('is-invalid');
            errorMessage.textContent = 'El formato telefinico es incorrecto'
            errorMessage.classList.add('invalid-feedback');
        }
    }

    function ValidateFecha() {
        var RegExpFecha = new RegExp(/\d{1,2}\/\d{1,2}\/\d{2,4}/)
        var inputField = $('#datepicker')[0]
        var errorMessage = inputField.parentNode.querySelector('.error')
        errorMessage.textContent = ''
        errorMessage.classList.remove('valid-feedback', 'invalid-feedback');
        var fecha = $('#datepicker').val()
        if (RegExpFecha.test(fecha)) {
            inputField.classList.remove('is-invalid');
            inputField.classList.add('is-valid');
            errorMessage.textContent = 'El formato de la fecha es correcto'
            errorMessage.classList.add('valid-feedback');
        } else {
            inputField.classList.remove('is-valid');
            inputField.classList.add('is-invalid');
            errorMessage.textContent = 'El formato de la fecha es incorrecto'
            errorMessage.classList.add('invalid-feedback');
        }
    }

    function ValidateCURP() {
        var RegExpCURP = new RegExp(/^([A-Z][AEIOUX][A-Z]{2}\d{2}(?:0[1-9]|1[0-2])(?:0[1-9]|[12]\d|3[01])[HM](?:AS|B[CS]|C[CLMSH]|D[FG]|G[TR]|HG|JC|M[CNS]|N[ETL]|OC|PL|Q[TR]|S[PLR]|T[CSL]|VZ|YN|ZS)[B-DF-HJ-NP-TV-Z]{3}[A-Z\d])(\d)$/)
        var inputField = $('#inptCRUP')[0]
        var errorMessage = inputField.parentNode.querySelector('.error')
        errorMessage.textContent = ''
        errorMessage.classList.remove('valid-feedback', 'invalid-feedback');
        var curp = $('#inptCRUP').val()
        if (RegExpCURP.test(curp)) {
            inputField.classList.remove('is-invalid');
            inputField.classList.add('is-valid');
            errorMessage.textContent = 'El formato del curp es correcto'
            errorMessage.classList.add('valid-feedback');
        } else {
            inputField.classList.remove('is-valid');
            inputField.classList.add('is-invalid');
            errorMessage.textContent = 'El formato del curp es incorrecto'
            errorMessage.classList.add('invalid-feedback');
        }
    }

    function ValidateSelect(IdElemento) {
        var select = $('#' + IdElemento).val()
        var inputField = $('#' + IdElemento)[0]
        var errorMessage = inputField.parentNode.querySelector('.error')
        errorMessage.textContent = ''
        errorMessage.classList.remove('valid-feedback', 'invalid-feedback');
        if (select != '') {
            inputField.classList.remove('is-invalid');
            inputField.classList.add('is-valid');
            errorMessage.textContent = 'Opcion selecionada correctamente'
            errorMessage.classList.add('valid-feedback');
        } else {
            inputField.classList.remove('is-valid');
            inputField.classList.add('is-invalid');
            errorMessage.textContent = 'Debe selecionar un elemento'
            errorMessage.classList.add('invalid-feedback');
        }
    }

    function ValidateUserName() {
        var RegExpUserName = new RegExp(/^[[A-Z]|[a-z]][[A-Z]|[a-z]|\\d|[_]]{7,29}$/)
        var inputField = $('#inptUserName')[0]
        var errorMessage = inputField.parentNode.querySelector('.error')
        errorMessage.textContent = ''
        errorMessage.classList.remove('valid-feedback', 'invalid-feedback');
        var userName = $('#inptUserName').val()
        if (RegExpUserName.test(userName)) {
            inputField.classList.remove('is-invalid');
            inputField.classList.add('is-valid');
            errorMessage.textContent = 'El nombre de usuario es valido'
            errorMessage.classList.add('valid-feedback');
        } else {
            inputField.classList.remove('is-valid');
            inputField.classList.add('is-invalid');
            errorMessage.textContent = 'Nombre de usuario no valido'
            errorMessage.classList.add('invalid-feedback');
        }
    }

    function ValidateAlphanumericoEspacios() {
        var RegExpCalle = new RegExp(/^[a-zA-Z0-9 ]+$/)
        var inputField = $('#inptCalle')[0]
        var errorMessage = inputField.parentNode.querySelector('.error')
        errorMessage.textContent = ''
        errorMessage.classList.remove('valid-feedback', 'invalid-feedback');
        var userName = $('#inptCalle').val()
        if (RegExpCalle.test(userName)) {
            inputField.classList.remove('is-invalid');
            inputField.classList.add('is-valid');
            errorMessage.textContent = 'El nombre de la calle es valido'
            errorMessage.classList.add('valid-feedback');
        } else {
            inputField.classList.remove('is-valid');
            inputField.classList.add('is-invalid');
            errorMessage.textContent = 'Nombre de calle no valido'
            errorMessage.classList.add('invalid-feedback');
        }
    }

    function SoloNumeros(event) {
        var caracter = String.fromCharCode(event.which);
        var inputField = event.target;
        var errorMessage = inputField.parentNode.querySelector('.error');
        errorMessage.textContent = '';
        errorMessage.classList.remove('valid-feedback', 'invalid-feedback');
        if (/[0-9]/.test(caracter)) {
            inputField.classList.remove('is-invalid');
            inputField.classList.add('is-valid');
            errorMessage.textContent = 'Entrada válida';
            errorMessage.classList.add('valid-feedback');
        } else {
            event.preventDefault();
            inputField.classList.remove('is-valid');
            inputField.classList.add('is-invalid');
            errorMessage.textContent = 'Solo se permiten números';
            errorMessage.classList.add('invalid-feedback');
        }
    }

    function ValidateForm() {
        let isValid = true;
        $('input[type="text"], input[type="password"], select').not('#inptImagen').each(function () {
            let input = $(this);
            if (input.attr('id') !== 'Estatus') {
                if (input.val() === '' || input.val() === null) {
                    input.addClass('is-invalid');
                    let errorDiv = input.parent().find('.error');
                    errorDiv.text('Este campo es obligatorio');
                    errorDiv.addClass('invalid-feedback');
                    isValid = false;
                }
            }
        });

        if (!$('input[name="Sexo"]:checked').val()) {
            $('input[name="Sexo"]').parent().parent().addClass('is-invalid');
            isValid = false;
        }

        $('select').each(function () {
            let select = $(this);
            if (select.val() === '' || select.val() === null) {
                select.addClass('is-invalid');
                let errorDiv = select.parent().find('.error');
                errorDiv.text('Debe seleccionar un elemento');
                errorDiv.addClass('invalid-feedback');
                isValid = false;
            }
        });

        let password = $('#password').val();
        let confirmPassword = $('#confirmPassword').val();
        if (password !== confirmPassword) {
            $('#confirmPassword').addClass('is-invalid');
            $('#confirmPassword').parent().find('.error')
                .text('Las contraseñas no coinciden')
                .addClass('invalid-feedback');
            isValid = false;
        }
        return isValid;
    }

    function GetMunicipioByIdEstado() {
        let ddlEstado = $("#ddlEstado").val()
        if (ddlEstado) {
            $.ajax({
                url: "@Url.Action("GetMunicipiosByIdEstado", "Usuario")?IdEstado=" + ddlEstado,
                type: "GET",
                dataType: "JSON",
                success: function (result) {
                    if (result.Correct) {
                        let ddlMunicipio = $('#ddlMunicipio').empty().append('<option value="">Seleccione un Municipio</option>')
                        $("#ddlColonia").empty().append('<option value="">Seleccione una colonia</option>')
                        $.each(result.Objects, function (i, valor) {
                            let opcion = '<option value="' + valor.IdMunicipio + '">' + valor.Nombre + '</option>'
                            ddlMunicipio.append(opcion)
                        })
                    }
                },
                error: function (xhr) {
                    console.log(xhr)
                }
            })
        } else {
            $("#ddlMunicipio").empty().append('<option value="">Seleccione un Municipio</option>')
            $("#ddlColonia").empty().append('<option value="">Seleccione una colonia</option>')
        }
    }

    function GetColoniasByIdMunicipio() {
        let ddlMunicipio = $('#ddlMunicipio').val()
        if (ddlMunicipio) {
            $.ajax({
                url: "@Url.Action("GetColoniasByIdMunicipio", "Usuario")?IdMunicipio=" + ddlMunicipio,
                type: "GET",
                dataType: "JSON",
                success: function (result) {
                    if (result.Correct) {
                        let ddlColonia = $('#ddlColonia').empty().append('<option value="">Seleccione una colonia</option>')
                        $.each(result.Objects, function (i, valor) {
                            let opcion = '<option value="' + valor.IdColonia + '">' + valor.Nombre + '</option>'
                            ddlColonia.append(opcion)
                        })
                    }
                },
                error: function (xhr) {
                    console.log(xhr)
                }
            })
        } else {
            $("#ddlColonia").empty().append('<option value="">Seleccione una colonia</option>')
        }
    }

    function IsImage() {
        let archivo = $('#inptImagen')[0].files[0]
        let extencionArchivo = archivo.name.split('.').pop().toLowerCase();
        let contenIMG = $('#imagenUsuario')[0]
        let extenciones = ["jpg", "jpeg", "png", "svg", "webp"]
        if (archivo.size > 1000000) {
            alert("El archivo no debe ser mayor a 3 MB.");
            $('#inptImagen').val('')
            contenIMG.src = '/content/imagenes/usuarioMasculino.png'
            return
        }

        if ($.inArray(extencionArchivo, extenciones) === -1) {
            alert(`El archivo debe ser una imagen de tipo: ${extenciones}`)
            $('#inptImagen').val('')
            contenIMG.src = '/content/imagenes/usuarioMasculino.png'
        } else {
            CambiarImg(archivo, contenIMG)
            //contenIMG.src = URL.createObjectURL(archivo)
        }
    }

    function CambiarImg(input, contenIMG) {
        var reader = new FileReader()
        reader.onload = function (elemento) {
            contenIMG.src = elemento.target.result
        }
        reader.readAsDataURL(input)
    }

    function CambiarImgSexo() {
        if ($('#inptImagen').val() === '') {
            let inptSexo = $('input[name="Sexo"]:checked').val()
            let contenIMG = $('#imagenUsuario')[0]
            contenIMG.src = (inptSexo === 'HO' ? '/content/imagenes/usuarioMasculino.png' : '/content/imagenes/usuarioFemenino.png')
        }
    }
</script>
